{"version":3,"file":"esc-influxdb.js","sources":["../src/index.js"],"sourcesContent":["import SystemESC from '@mark48evo/system-esc';\nimport { InfluxDB, FieldType } from 'influx';\nimport amqplib from 'amqplib';\nimport Debug from 'debug';\nimport pmx from 'pmx';\n\nconst debug = Debug('esc:influxdb');\n\npmx.init({});\n\nconst messagesProcessed = pmx.probe().counter({\n  name: 'ESC Messages Processed',\n});\n\nconst messagesProcessedPerMin = pmx.probe().meter({\n  name: 'msg/min',\n  samples: 1,\n  timeframe: 60,\n});\n\nconst config = {\n  influxHost: process.env.INFLUXDB_HOST || 'localhost',\n  influxDB: process.env.INFLUXDB_DB || 'mark48evo',\n  host: process.env.RABBITMQ_HOST || 'amqp://localhost',\n};\n\nconst influx = new InfluxDB({\n  host: config.influxHost,\n  database: config.influxDB,\n  schema: [\n    {\n      measurement: 'esc',\n      fields: {\n        tempMOSFET: FieldType.FLOAT,\n        tempMOTOR: FieldType.FLOAT,\n        currentBATTERY: FieldType.FLOAT,\n        currentMOTOR: FieldType.FLOAT,\n        id: FieldType.FLOAT,\n        iq: FieldType.FLOAT,\n        duty: FieldType.FLOAT,\n        rpm: FieldType.FLOAT,\n        voltage: FieldType.FLOAT,\n        ampHoursConsumed: FieldType.FLOAT,\n        ampHoursCharged: FieldType.FLOAT,\n        wattHoursConsumed: FieldType.FLOAT,\n        wattHoursCharged: FieldType.FLOAT,\n        tachometerValue: FieldType.FLOAT,\n        tachometerABS: FieldType.FLOAT,\n      },\n      tags: [\n        'device',\n        'faultCode',\n      ],\n    },\n  ],\n});\n\nasync function main() {\n  await influx.getDatabaseNames()\n    .then(async (names) => {\n      if (!names.includes(config.influxDB)) {\n        debug(`Creating InfluxDB \"${config.influxDB}\" database`);\n\n        await influx.createDatabase(config.influxDB);\n\n        return Promise.resolve();\n      }\n\n      return Promise.resolve();\n    });\n\n  const connect = await amqplib.connect(config.host);\n  const channel = await connect.createChannel();\n\n  const systemESC = await SystemESC(channel);\n\n  systemESC.on('stats', (data) => {\n    messagesProcessed.inc();\n    messagesProcessedPerMin.mark();\n\n    const fields = {\n      tempMOSFET: data.temp.mosfet,\n      tempMOTOR: data.temp.motor,\n      currentBATTERY: data.current.battery,\n      currentMOTOR: data.current.motor,\n      id: data.id,\n      iq: data.iq,\n      duty: data.dutyNow,\n      rpm: data.rpm,\n      voltage: data.voltage,\n      ampHoursConsumed: data.ampHours.consumed,\n      ampHoursCharged: data.ampHours.charged,\n      wattHoursConsumed: data.wattHours.consumed,\n      wattHoursCharged: data.wattHours.charged,\n      tachometerValue: data.tachometer.value,\n      tachometerABS: data.tachometer.abs,\n    };\n\n    const tags = {\n      device: 'left',\n      faultCode: data.faultCode,\n    };\n\n    influx.writePoints([\n      {\n        measurement: 'esc',\n        tags,\n        fields,\n        timestamp: new Date(data.timestamp),\n      },\n    ]).catch((err) => {\n      console.error(`InfluxDB Error: \"${err.message()}\" \"${err.stack}\"`);\n    });\n  });\n}\n\nmain();\n"],"names":["debug","Debug","pmx","init","messagesProcessed","probe","counter","messagesProcessedPerMin","meter","config","process","env","INFLUXDB_HOST","INFLUXDB_DB","RABBITMQ_HOST","influx","InfluxDB","influxHost","influxDB","FieldType","FLOAT","main","getDatabaseNames","then","names","includes","createDatabase","Promise","resolve","connect","amqplib","host","channel","createChannel","systemESC","SystemESC","on","data","inc","mark","fields","temp","mosfet","motor","current","battery","id","iq","dutyNow","rpm","voltage","ampHours","consumed","charged","wattHours","tachometer","value","abs","tags","faultCode","writePoints","Date","timestamp","catch","err","error","message","stack"],"mappings":";;;;;;;;;;AAMA,MAAMA,QAAQC,MAAM,cAAN,CAAd;AAEAC,IAAIC,IAAJ,CAAS,EAAT;AAEA,MAAMC,oBAAoBF,IAAIG,KAAJ,GAAYC,OAAZ,CAAoB;QACtC;CADkB,CAA1B;AAIA,MAAMC,0BAA0BL,IAAIG,KAAJ,GAAYG,KAAZ,CAAkB;QAC1C,SAD0C;WAEvC,CAFuC;aAGrC;CAHmB,CAAhC;AAMA,MAAMC,SAAS;cACDC,QAAQC,GAAR,CAAYC,aAAZ,IAA6B,WAD5B;YAEHF,QAAQC,GAAR,CAAYE,WAAZ,IAA2B,WAFxB;QAGPH,QAAQC,GAAR,CAAYG,aAAZ,IAA6B;CAHrC;AAMA,MAAMC,WAAS,IAAIC,eAAJ,CAAa;QACpBP,OAAOQ,UADa;YAEhBR,OAAOS,QAFS;UAGlB,CACN;iBACe,KADf;YAEU;kBACMC,iBAAUC,KADhB;iBAEKD,iBAAUC,KAFf;sBAGUD,iBAAUC,KAHpB;oBAIQD,iBAAUC,KAJlB;UAKFD,iBAAUC,KALR;UAMFD,iBAAUC,KANR;YAOAD,iBAAUC,KAPV;WAQDD,iBAAUC,KART;eASGD,iBAAUC,KATb;wBAUYD,iBAAUC,KAVtB;uBAWWD,iBAAUC,KAXrB;yBAYaD,iBAAUC,KAZvB;wBAaYD,iBAAUC,KAbtB;uBAcWD,iBAAUC,KAdrB;qBAeSD,iBAAUC;KAjB7B;UAmBQ,CACJ,QADI,EAEJ,WAFI;GApBF;CAHK,CAAf;;AA+BA,eAAeC,IAAf,GAAsB;QACdN,SAAOO,gBAAP,GACHC,IADG,CACE,MAAOC,KAAP,IAAiB;QACjB,CAACA,MAAMC,QAAN,CAAehB,OAAOS,QAAtB,CAAL,EAAsC;YAC7B,sBAAqBT,OAAOS,QAAS,YAA5C;YAEMH,SAAOW,cAAP,CAAsBjB,OAAOS,QAA7B,CAAN;aAEOS,QAAQC,OAAR,EAAP;;;WAGKD,QAAQC,OAAR,EAAP;GAVE,CAAN;QAaMC,UAAU,MAAMC,QAAQD,OAAR,CAAgBpB,OAAOsB,IAAvB,CAAtB;QACMC,UAAU,MAAMH,QAAQI,aAAR,EAAtB;QAEMC,YAAY,MAAMC,UAAUH,OAAV,CAAxB;YAEUI,EAAV,CAAa,OAAb,EAAuBC,IAAD,IAAU;sBACZC,GAAlB;4BACwBC,IAAxB;UAEMC,SAAS;kBACDH,KAAKI,IAAL,CAAUC,MADT;iBAEFL,KAAKI,IAAL,CAAUE,KAFR;sBAGGN,KAAKO,OAAL,CAAaC,OAHhB;oBAICR,KAAKO,OAAL,CAAaD,KAJd;UAKTN,KAAKS,EALI;UAMTT,KAAKU,EANI;YAOPV,KAAKW,OAPE;WAQRX,KAAKY,GARG;eASJZ,KAAKa,OATD;wBAUKb,KAAKc,QAAL,CAAcC,QAVnB;uBAWIf,KAAKc,QAAL,CAAcE,OAXlB;yBAYMhB,KAAKiB,SAAL,CAAeF,QAZrB;wBAaKf,KAAKiB,SAAL,CAAeD,OAbpB;uBAcIhB,KAAKkB,UAAL,CAAgBC,KAdpB;qBAeEnB,KAAKkB,UAAL,CAAgBE;KAfjC;UAkBMC,OAAO;cACH,MADG;iBAEArB,KAAKsB;KAFlB;aAKOC,WAAP,CAAmB,CACjB;mBACe,KADf;UAAA;YAAA;iBAIa,IAAIC,IAAJ,CAASxB,KAAKyB,SAAd;KALI,CAAnB,EAOGC,KAPH,CAOUC,GAAD,IAAS;cACRC,KAAR,CAAe,oBAAmBD,IAAIE,OAAJ,EAAc,MAAKF,IAAIG,KAAM,GAA/D;KARF;GA3BF;;;AAwCF9C"}